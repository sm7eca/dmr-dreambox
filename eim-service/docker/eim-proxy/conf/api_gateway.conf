
limit_req_zone $binary_remote_addr zone=eim_api:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=eim_api_invalid:10m rate=15r/m;

server {
   listen 443;
   return 301 http://$host$request_uri;
}


server {

	listen 80;
	server_name ${EIM_NGINX_HOST};

	location / {
		# catch everything else
		limit_req zone=eim_api_invalid;
		access_log /var/log/nginx/eim_api_invalid.log main;
		limit_req_log_level warn;
	}

	location /api/v1/ {
		limit_req zone=eim_api burst=7 nodelay;
		access_log /var/log/nginx/eim_api.log main;
		limit_req_log_level warn;

		proxy_pass http://eim-core:8000/;
	}

	location @400 {
		return 400 '{"status":400,"message":"Bad request"}\n';
	}
	location @401 {
		return 401 '{"status":401,"message":"Unauthorized"}\n';
	}
	location @403 {
		return 403 '{"status":403,"message":"Forbidden"}\n';
	}
	location @404 {
		return 404 '{"status":404,"message":"Resource not found"}\n';
	}

	error_page 400 = @400;
	error_page 401 = @401;
	error_page 403 = @403;
	error_page 404 = @404;
	proxy_intercept_errors on;			# Do not send backend errors to the client
	default_type application/json;	# if not specified, assume JSON
}
